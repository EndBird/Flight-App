package group730.bookingclient.core.entities;

import group730.bookingclient.core.services.UserManager;
import group730.bookingclient.core.utils.DateTimeUtils;

import java.io.Serializable;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;

/**
 * An itinerary object represent a collection of flights that form a trip from a
 * given location (origin) to a final location (destination).
 */
public class Itinerary implements Serializable {

    private List<Flight> connectingFlights;

    /**
     * Assigns the default values of a new instance of the Itinerary object.
     *
     * @param connectingFlights Collection of flights that make up this
     *                          itinerary.
     */
    public Itinerary(List<Flight> connectingFlights) {

        this.connectingFlights = connectingFlights;
    }

    /**
     * Returns the origin of departure from the first flight in the trip.
     *
     * @return An string representing the origin.
     */
    public String getOrigin() {
        return connectingFlights.get(0).getOrigin();
    }

    /**
     * Returns the final destination of the trip.
     *
     * @return An string representing the final destination.
     */
    public String getDestination() {
        return connectingFlights.get(connectingFlights.size() - 1)
                .getDestination();
    }

    /**
     * Returns the time at which the first flight in the trip departs.
     *
     * @return Date object representing the date and/or time.
     */
    public Date getDepartureDateTime() {
        return connectingFlights.get(0).getDepartureDateTime();
    }

    /**
     * Returns the time at which the last flight in the trip arrives at its
     * final destination.
     *
     * @return Date object representing the date and/or time.
     */
    public Date getArrivalDateTime() {
        return connectingFlights.get(connectingFlights.size() - 1)
                .getArrivalDateTime();
    }

    /**
     * Returns the connecting flights in the journey.
     *
     * @return A collection of flights that make up the journey.
     */
    public List<Flight> getConnectingFlights() {
        return connectingFlights;
    }

    /**
     * Assigns the connecting flights in the journey.
     *
     * @param connectingFlights A collection of flights that make up the
     *                          journey.
     */
    public void setConnectingFlights(List<Flight> connectingFlights) {
        this.connectingFlights = connectingFlights;

    }

    /**
     * Returns the duration of the trip in milliseconds.
     *
     * @return A long representing the duration of the trip.
     */
    public long getTravelTime() {
        Flight first = this.connectingFlights.get(0);
        Flight last = this.connectingFlights.get(connectingFlights.size() - 1);

        return last.getArrivalDateTime().getTime()
                - first.getDepartureDateTime().getTime();
    }

    /**
     * Returns the formatted duration of the trip (HH:mm).
     *
     * @return A string representing the duration of the trip.
     */
    public String getTimeSpanAsString() {
        return DateTimeUtils.convertTimeToString(getTravelTime());
    }

    /**
     * Returns the total cost of the entire trip.
     *
     * @return Double representing the total cost of the trip.
     */
    public double getCost() {
        double totalCost = 0;

        for (Flight flight : this.connectingFlights) {
            totalCost += flight.getCost();
        }

        return totalCost;
    }

    /**
     * Returns a string representation of the trip in the format:
     * Number,DepartureDateTime,ArrivalDateTime,Airline,Origin,
     * Destination followed by total price (on its own line, exactly two
     * decimal places), followed by total duration (on its own line, in
     * format HH:MM).
     *
     * @return A string representation of the itinerary.
     */
    public String toString() {
        String s = "";

        for (Flight flight : connectingFlights) {
            s += flight.toString(false) + "\n";
        }

        s += new DecimalFormat("0.00").format(getCost()) + "\n";
        s += getTimeSpanAsString() + "\n";

        return s;
    }

}

