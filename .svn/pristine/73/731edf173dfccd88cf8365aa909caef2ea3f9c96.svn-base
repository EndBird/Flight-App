package group730.bookingclient.core.services;

import android.util.Log;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import group730.bookingclient.core.entities.Client;
import group730.bookingclient.core.entities.User;

/**
 * This class manages all the Flight related operations including retrieval of
 * the collection of all users, users as users of program, add more users to
 * collection, set currentBlog, get currentBlog, instantiate UserManager,
 * get instance of UserManager.
 */
public class UserManager {

    public enum USER_TYPE {
        ADMINISTRATOR,
        CLIENT
    }

    private Map<String, User> users;
    private static UserManager userManager;
    private User currentUser;

    /**
     * Gets a UserManager instance or instantiate one if none exits.
     *
     * @return UserManager
     */
    public static UserManager getInstance() {
        if (userManager == null)
            userManager = new UserManager();
        return userManager;
    }

    /**
     * Handles the assignment of the users by loading users from the data
     * store.
     */
    private UserManager() {
        users = new HashMap<>();
        //users = DataManager.getInstance().loadUsers();
    }

    /**
     * References to the current user that is being interacted with.
     *
     * @return User object the represents the current user.
     */
    public User getCurrentUser() {
        return this.currentUser;
    }

    /**
     * Updates the reference of the current user that is being interacted with.
     *
     * @param user
     */
    public void setCurrentUser(User user) {
        this.currentUser = user;
    }

    /**
     * Returns a Map containing all the users.
     *
     * @return Map containing all the users with the key being the email address
     * and the value being the user object.
     */
    public Map<String, User> getUsers() {
        return users;
    }

    /**
     * Returns a Map containing all the clients.
     *
     * @return Map containing all the clients with the key being the email address
     * and the value being the client object.
     */
    public Map<String, User> getClients() {
        Map<String, User> clients = new HashMap<>();

        for (User user : this.users.values()) {
            if (user.getUserType() == USER_TYPE.CLIENT) {
                clients.put(user.getEmail(), user);
            }
        }

        return clients;
    }

    /**
     * Re/Assigns the of a Map containing all the users.
     *
     * @param users Map containing all the users with the key being the email
     *              address and the value being its user.
     */
    public void setUsers(Map<String, User> users) {
        this.users = users;
    }

    /**
     * Adds all users in a Map containing a mapping of user emails to their user
     * objects to this classes Map with the same mapping.
     *
     * @param users Map containing all the users with the key being the email
     *              address and the value being its user.
     */
    public void addUsers(List<User> users) {
        for (User user : users) {
            if (this.users.keySet().contains(user.getEmail())) {
                this.users.remove(user.getEmail());
            }
            this.users.put(user.getEmail(), user);
        }
    }

    /**
     * Adds all users in a Map containing a mapping of user emails to their user
     * objects to this classes Map with the same mapping.
     */
    public void saveUsers() {
        DataManager.getInstance().saveUsers(this.users);
    }

    /** Checks to see whether the an account with email and password exists.
     * If yes, then return the User object with that email and password.
     * If not, then return null.
     *
     * @param email A string.
     *
     * @param password A string.
     * @return User or null.
     */

    public User validateAndReturnUser(String email, String password) {
        if (this.users.containsKey(email)) {
            User user = this.getUsers().get(email);
            Log.i("PASS CHECK", user.getPassword() + " " + password + ". " + (user.getPassword() == password));
            if (user.getPassword().equals(password)) {
                return user;
            }
        }
        return null;
    }

}
